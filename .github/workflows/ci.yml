name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '33 2 * * 1' # weekly, on Monday morning

env:
  MAILER_DSN: null://null
  ILIOS_LOCALE: en
  ILIOS_SECRET: ThisTokenIsNotSoSecretChangeIt
  ILIOS_FILE_SYSTEM_STORAGE_PATH: /tmp
  SYMFONY_DEPRECATIONS_HELPER: disabled=1
  MESSENGER_TRANSPORT_DSN: doctrine://default
  latest_php: 8.0
  DOCKER_BUILDKIT: 1

jobs:
  code_style:
    name: Code Style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use PHP ${{ env.latest_php }}
      uses: shivammathur/setup-php@2.18.0
      with:
        coverage: none
        php-version: ${{ env.latest_php }}
        extensions: apcu
    - name: install dependencies
      run: composer install --no-interaction --prefer-dist
    - name: lint PHP
      run: vendor/bin/phpcs
    - name: lint twig
      run: bin/console lint:twig templates custom
    - name: phpstan src
      run: |
        bin/console cache:warmup --env=dev
        vendor/bin/phpstan analyse --no-progress
    - name: phpstan tests
      run: |
        bin/console cache:warmup --env=test
        vendor/bin/phpstan analyse -c tests/phpstan.neon.dist tests --no-progress

  tests:
    name: PHPUnit Tests
    needs: code_style
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.0, 8.1]

    steps:
    - uses: actions/checkout@v3
    - name: Use PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@2.18.0
      with:
        coverage: none
        php-version: ${{ matrix.php-version }}
        extensions: apcu
    - name: install dependencies
      run: composer install --no-interaction --prefer-dist
    - name: Run Tests
      run: vendor/bin/phpunit

  test_migrations_against_mysql:
    name: Test Migrations Against MySQL
    needs: code_style
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use PHP ${{ env.latest_php }}
      uses: shivammathur/setup-php@2.18.0
      with:
        coverage: none
        php-version: ${{ env.latest_php }}
        extensions: apcu
    - name: install dependencies
      run: composer install --no-interaction --prefer-dist
    - name: Drop, Create, Migrate, and Validate DB
      env:
        ILIOS_DATABASE_URL: mysql://root:root@127.0.0.1:3306/ilios?serverVersion=8.0
      run: |
        sudo systemctl start mysql.service
        bin/console doctrine:database:drop --if-exists --force
        bin/console doctrine:database:create
        bin/console doctrine:migrations:migrate  --no-interaction
        bin/console doctrine:schema:validate

  run_twice:
    name: PHPUnit Run Twice
    needs: code_style
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: [8.0, 8.1]

    steps:
    - uses: actions/checkout@v3
    - name: Use PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@2.18.0
      with:
        coverage: none
        php-version: ${{ matrix.php-version }}
        extensions: apcu
    - name: install dependencies
      run: composer install --no-interaction --prefer-dist
    - name: First Run
      run: vendor/bin/phpunit --group twice
    - name: Second Run
      run: vendor/bin/phpunit --group twice

  build_amd_containers:
    name: Build Containers (amd64)
    needs: code_style
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - php-apache
          - nginx
          - fpm
          - fpm-dev
          - admin
          - migrate-database
          - update-frontend
          - consume-messages
          - mysql
          - mysql-demo
          - elasticsearch
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build ${{ matrix.image }}
      uses: docker/build-push-action@v2
      with:
        build-args: ILIOS_VERSION=test
        target: ${{ matrix.image }}
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.image }}-image
        path: /tmp/${{ matrix.image }}.tar

  build_arm_containers:
     name: Build Containers (arm64)
     needs: code_style
     runs-on: ubuntu-latest
     strategy:
       matrix:
         image:
          - php-apache
          - nginx
          - fpm
          - fpm-dev
          - admin
          - migrate-database
          - update-frontend
          - consume-messages
          - mysql
          - mysql-demo
          - elasticsearch
     steps:
     - uses: actions/checkout@v3
     - name: Set up QEMU
       uses: docker/setup-qemu-action@v1
       with:
         image: tonistiigi/binfmt:latest
         platforms: linux/arm64
     - name: Set up Docker Buildx
       uses: docker/setup-buildx-action@v1
     - name: Build ${{ matrix.image }}
       uses: docker/build-push-action@v2
       with:
         build-args: ILIOS_VERSION=test
         target: ${{ matrix.image }}
         push: false
         cache-from: type=gha
         cache-to: type=gha,mode=max

  run_containers:
    name: Run and Test Containers
    needs: build_amd_containers
    runs-on: ubuntu-latest
    env:
      ILIOS_DATABASE_URL: mysql://root:root@127.0.0.1:3306/ilios?serverVersion=8.0
      ILIOS_SECRET: DifferentSecret
      ILIOS_FILE_SYSTEM_STORAGE_PATH: /tmp
    steps:
    - uses: actions/checkout@v3
    - name: Drop, Create Database to use everywhere else
      run: |
        sudo systemctl start mysql.service
        mysql -uroot -proot -e "DROP DATABASE IF EXISTS ilios"
        mysql -uroot -proot -e "CREATE DATABASE ilios"
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: /tmp/
    - name: Load Images
      run: |
        docker load --input /tmp/php-apache.tar
        docker load --input /tmp/nginx.tar
        docker load --input /tmp/fpm.tar
        docker load --input /tmp/fpm-dev.tar
        docker load --input /tmp/admin.tar
        docker load --input /tmp/update-frontend.tar
        docker load --input /tmp/consume-messages.tar
        docker load --input /tmp/mysql.tar
        docker load --input /tmp/mysql-demo.tar
        docker load --input /tmp/elasticsearch.tar
        docker image ls -a
    - name: Consume Messages
      run: |
        docker run -d --name ilios-consume-messages -e ILIOS_SECRET -e ILIOS_DATABASE_URL -e ILIOS_FILE_SYSTEM_STORAGE_PATH consume-messages
        docker ps | grep -q ilios-consume-messages
    - name: Apache PHP
      run: |
        docker run -d --name ilios-php-apache-test -e ILIOS_SECRET -e ILIOS_DATABASE_URL -e ILIOS_FILE_SYSTEM_STORAGE_PATH php-apache-test
        docker ps | grep -q ilios-php-apache-test
        docker exec ilios-php-apache-test php /var/www/ilios/bin/console monitor:health
    - name: Nginx
      run: |
        docker run -d --name ilios-nginx ilios-nginx
        docker ps | grep -q ilios-nginx
    - name: FPM
      run: |
        docker run -d --name ilios-fpm -e ILIOS_SECRET -e ILIOS_DATABASE_URL -e ILIOS_FILE_SYSTEM_STORAGE_PATH fpm
        docker ps | grep -q ilios-fpm
        docker exec ilios-fpm php bin/console monitor:health
    - name: FPM Dev
      run: |
        docker run -d --name ilios-fpm-dev -e ILIOS_SECRET -e ILIOS_DATABASE_URL -e ILIOS_FILE_SYSTEM_STORAGE_PATH fpm-dev
        docker ps | grep -q ilios-fpm-dev
        docker exec ilios-fpm-dev php bin/console monitor:health
    - name: Admin
      run: |
        docker run -d --name ilios-admin admin
        docker ps | grep -q ilios-admin
    - name: MySQL
      run: |
        docker run -d --name ilios-mysql mysql
        docker ps | grep -q ilios-mysql
    - name: MySQL Demo
      run: |
        docker run -d --name ilios-mysql-demo mysql-demo
        docker ps | grep -q ilios-mysql-demo
    - name: Elasticsearch
      run: |
        docker run -d --name ilios-elasticsearch elasticsearch
        docker ps | grep -q ilios-elasticsearch

  check_setup_command:
    name: Setup Command
    needs: code_style
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.0, 8.1]

    steps:
      - uses: actions/checkout@v3
      - name: Use PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@2.18.0
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          extensions: apcu
      - name: Run Setup Command
        run: bin/setup

  check_update_frontend_command:
    name: Update Frontend Command
    needs: code_style
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.0, 8.1]

    steps:
      - uses: actions/checkout@v3
      - name: Use PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@2.18.0
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          extensions: apcu
      - name: install dependencies
        run: composer install --no-interaction --prefer-dist
      - name: Run Update Frontend
        run: bin/console ilios:update-frontend
