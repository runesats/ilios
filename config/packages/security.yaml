security:
  access_control:
    - { path: '^/api/doc', roles: PUBLIC_ACCESS }
    - { path: '^/api$', roles: PUBLIC_ACCESS }
    - { path: '^/application/config', roles: PUBLIC_ACCESS }
    - { path: '^/auth/(login|logout)', roles: PUBLIC_ACCESS }
    - { path: '^/auth', roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/api', roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/application', roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/upload', roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/error', roles: IS_AUTHENTICATED_FULLY }
    - { path: '^/', roles: PUBLIC_ACCESS }
  access_decision_manager:
    allow_if_all_abstain: false
    strategy: unanimous
  password_hashers:
    App\Classes\SessionUserInterface:
      algorithm: auto
      migrate_from:
        - bcrypt
  providers:
    session_user:
      id: App\Service\SessionUserProvider
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      stateless: true
      custom_authenticators:
        - App\Security\JsonWebTokenAuthenticator


when@test:
     security:
         password_hashers:
             # By default, password hashers are resource intensive and take time. This is
             # important to generate secure password hashes. In tests however, secure hashes
             # are not important, waste resources and increase test times. The following
             # reduces the work factor to the lowest possible values.
             App\Classes\SessionUserInterface:
                 algorithm: auto
                 cost: 4 # Lowest possible value for bcrypt
                 time_cost: 3 # Lowest possible value for argon
                 memory_cost: 10 # Lowest possible value for argon
